<!DOCTYPE html>
<html lang="en">
  <%- include('partials/head.ejs')%>
  <body>
    <%- include('partials/avatar.ejs')%>
    <h2 class="fw-bold text-center wow fadeInUp" data-wow-delay="200ms">
      Dear <%=gender=="male"? "Mr." : "Miss." %> <%= username %> let's create
      the quiz.
    </h2>

    <section id="qBoard" class="pt-5">
      <!-- inserting all the question here -->
    </section>

    <button
      id="cook"
      type="button"
      class="btn btn-primary w-100 rounded-0 wow fadeInUp"
      data-bs-toggle="modal"
      data-bs-target="#exampleModal"
      data-wow-delay="400ms"
    >
      Damn, let me share the quiz now
    </button>

    <!-- Modal -->

    <%- include('partials/modal.ejs')%> <%- include('partials/footer.ejs')%>

    <script>
      const gender = "<%=gender%>";
      const date = "<%=date%>";
      const username = "<%=username%>";
    </script>
    <script src="/js/cookScreen_backend.js"></script>
    <!-- <script>
        const optionArr = document.querySelectorAll('.options');
        const answerForm = document.querySelector('#answerForm');


        for (let subOptions of optionArr) {
            const buttonA = subOptions.children[0];
            const buttonB = subOptions.children[1];
            const buttonC = subOptions.children[2];
            const buttonD = subOptions.children[3];


            // future implementation FEATURE will show blank value on button focus and show optionA/b/c/d on leave focus  

            buttonA.addEventListener('click', function (e) {
                e.stopPropagation();
                buttonA.classList.add('active');
                buttonB.classList.remove('active');
                buttonC.classList.remove('active');
                buttonD.classList.remove('active');

            });

            buttonB.addEventListener('click', function (e) {
                e.stopPropagation();
                buttonB.classList.add('active');
                buttonA.classList.remove('active');
                buttonC.classList.remove('active');
                buttonD.classList.remove('active');

            });

            buttonC.addEventListener('click', function (e) {
                e.stopPropagation();
                buttonC.classList.add('active');
                buttonA.classList.remove('active');
                buttonB.classList.remove('active');
                buttonD.classList.remove('active');

            });

            buttonD.addEventListener('click', function (e) {
                e.stopPropagation();
                buttonD.classList.add('active');
                buttonA.classList.remove('active');
                buttonB.classList.remove('active');
                buttonC.classList.remove('active');
            });



        }






        const userDefinedQuestions = {};

        const quesSections = document.querySelectorAll('#ques');
        for (let sec of quesSections) {
            sec.children[0].addEventListener('click', function (e) {
                // console.log('clicked');
                e.stopPropagation();
            })

            sec.addEventListener('click', function () {
                sec.classList.toggle('list-group-item-success');
            })


        }


        const genLinkBtn = document.querySelector("#genLinkBtn");
        genLinkBtn.addEventListener('click', function () {
            const chosenQues = document.querySelectorAll(".list-group-item-success#ques");
            // console.log(chosenQues);

            var allCookedQuesitons = [];


            for (let obj of chosenQues) {

                // console.log(obj.children[1].querySelector('.active'));
                let correctAnsId = obj.children[1].querySelector('.active');
                correctAnsId = (correctAnsId == null) ? null : `option_${correctAnsId.id}`;
                
                
                if(correctAnsId == null ){
                    alert('please activate the correct option of all highlighted questions');
                    return;
                }

                


                var ques1 = {
                    question: obj.children[0].value,
                    option_a: obj.children[1].children[0].value,
                    option_b: obj.children[1].children[1].value,
                    option_c: obj.children[1].children[2].value,
                    option_d: obj.children[1].children[3].value,
                    correctAns: correctAnsId
                }

                // console.log(ques1);
                allCookedQuesitons.push(ques1);
                // console.log(allCookedQuesitons);

                // send the cooked questions post request
                
               


            }
            const _l = allCookedQuesitons.length;
            if(_l !=5){
                    alert(`you have selected ${_l}. Select 5 questions exactly!`);
                    console.log(_l);
                    return;
                }

            // this will be fixed in the future. Right now it gets the job done. nothing is asynchronous
            var xhr = new XMLHttpRequest();
                xhr.open("POST", '/cooked', true);
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify({
                    allCookedQuesitons,
                    username :`<%=username%>`,
                    gender :`<%=gender%>`,
                }));
                gottourl();
            
        })


        
        function gottourl(){
            window.location.href = '/<%=username%>/cooked/share';
        }; 
        
        
       




    </script> -->
  </body>
</html>
